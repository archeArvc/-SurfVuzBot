from aiogram import types, Dispatcher
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from fsm.city import cc_inline
import json
from keyboards.reply import *
from keyboards.inline import ok_data, profiles_data
from modules.data_base import check_data, get_data
import asyncio as asy
from fsm.sql_handler import callabel_dop, stater
from trash.parser import vuzoteka
from pathlib import Path
from modules.TelegramUtils.topest import get_vuzes, top_your_city


async def calls(call: types.CallbackQuery, callback_data: dict):
    msg = callback_data.get("type")
    if msg == "ok":
        photo = InputFile(f"{Path.cwd()}\\photos\\hello.png")
        await call.message.delete()
        await call.message.answer_photo(photo=photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main)
    elif msg == "back_to_main":
        pass


async def text_s(message: types.Message, state: FSMContext):
    hnh = await asy.gather(check_data(message.from_user.id))
    if hnh[0] == 'also_have':
        if message.text == "–§–∏–ª—å—Ç—Ä—ã":
            photo = InputFile(f"{Path.cwd()}\\photos\\filters.png")
            result = await asy.gather(get_data(message.from_user.id))
            if result[0][3] == 1:
                dops = "–î–∞"
            elif result[0][3] == 2:
                dops = "–ù–µ—Ç"

            if result[0][4] == 2:
                math_profile = "–ë–∞–∑–∞"
            elif result[0][4] == 1:
                math_profile = "–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è"
            splited_subs = result[0][2].split(" ")
            await message.answer_photo(
                photo=photo,
                caption=f"–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n*–ì–æ—Ä–æ–¥:* {result[0][1]}\n*–ü—Ä–µ–¥–º–µ—Ç—ã:* {', '.join(splited_subs)}\n*–í—Ö–æ–¥–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã:* {dops}\n*–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:* {math_profile}",
                reply_markup=filters_mrk,
                parse_mode=types.ParseMode.MARKDOWN_V2
                )
        elif message.text == "–ù–∞–∑–∞–¥":
            photo = InputFile(f"{Path.cwd()}\\photos\\hello.png")
            await message.answer_photo(photo=photo, caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main)
        elif message.text == "–¢–æ–ø—ã –≤—É–∑–æ–≤üÜí":
            photo = InputFile(f"{Path.cwd()}\\photos\\top.png")
            await message.answer_photo(photo=photo, caption="–¢–æ–ø—ã", reply_markup=toper)
        elif message.text == "–ü–æ–∏—Å–∫üî¨":
            photo = InputFile(f"{Path.cwd()}\\photos\\search.png")
            await message.answer_photo(photo=photo, caption="–ü–æ–∏—Å–∫", reply_markup=searcing_bottom)
        elif message.text == "–ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º":
            await message.answer("*–ñ–¥–∏—Ç–µ*", parse_mode=types.ParseMode.MARKDOWN_V2)
            get_dates = await asy.gather(get_data(message.from_user.id))
            print(get_dates, "sss")
            city = get_dates[0][1]
            subs = get_dates[0][2]
            print(city, subs.lower())
            result = await asy.gather(vuzoteka(city, subs.lower()))
            for res in result[0]:
                # photo = InputFile(f"https:{res['logo']}")
                await message.answer_photo(
                    photo=f"https:{res['logo']}",
                    caption=f"{res['title']}\n\n<b>–û–±—â–µ–∂–∏—Ç–∏–µ:</b> {res['social']}\n<b>–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è:</b> {res['date']}\n<b>–°—Ç—É–¥–µ–Ω—Ç–æ–≤:</b> {res['students']}\n<b>–°—Ä–µ–¥. –±–∞–ª–ª –ï–ì–≠:</b> {res['ege']}\n<b>–†—ç–π—Ç–∏–Ω–≥ –≤—É–∑–∞:</b> {res['rate']}\n<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—É–∑:</b> {res['link']}",
                    parse_mode=types.ParseMode.HTML
                    )
        elif message.text == "–í—Ö–æ–¥–Ω—ã–µ —ç–∫–∑.":
            await message.answer("–ò—Å–∫–∞—Ç—å —Å –≤—É–∑—ã/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ —ç–∫–∑–º–∞–µ–Ω–∞–º–∏ –∏–ª–∏ –±–µ–∑?", reply_markup=InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton("–î–∞", callback_data=callabel_dop.new(
                    active = "1"
                )),
                InlineKeyboardButton("–ù–µ—Ç", callback_data=callabel_dop.new(
                    active = "2"
                ))
            ))
        elif message.text == "–ì–æ—Ä–æ–¥":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥: ")
            await state.set_state(state=stater.write_city.state)
        elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
            await message.answer("–ö–∞–∫—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –≤—ã –±—É–¥–µ—Ç–µ —Å–¥–∞–≤–∞—Ç—å?",
                                 reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                    InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å–Ω—É—é", callback_data=profiles_data.new(act = 1)),
                                    InlineKeyboardButton("–ë–∞–∑—É", callback_data=profiles_data.new(act = 2))
                                 ))
        elif message.text == "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å":
            await message.answer("<b>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</b>")
        elif message.text == "–ü—Ä–µ–¥–º–µ—Ç—ã":
            pass
        elif message.text == "–¢–æ–ø 10 –≤—É–∑–æ–≤ –†–æ—Å—Å–∏–∏":
            res = await asy.gather(get_vuzes())
            await message.answer(res[0], disable_web_page_preview=True)
        elif message.text == "–¢–æ–ø –≤—É–∑–æ–≤ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞":
            res = await asy.gather(get_data(message.from_user.id))
            city = res[0][1]
            result = await asy.gather(top_your_city(city))
            await message.answer(result[0])
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n–í–≤–µ–¥–∏—Ç–µ /start")



def register_all(dp: Dispatcher):
    dp.register_message_handler(text_s, content_types=types.ContentType.TEXT)
    dp.register_callback_query_handler(calls, ok_data.filter(), state='*')
