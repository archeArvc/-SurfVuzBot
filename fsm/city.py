# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏ —Å –≤—É–∑–∞–º–∏
from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.callback_data import CallbackData
import aiohttp
import asyncio as asy
from bs4 import BeautifulSoup
import lxml
from modules.data_base import insert_data
from keyboards.inline import subsidii
from keyboards.inline import ok_mrk

class StartState(StatesGroup):
    city = State()
    count_subjects = State()


count_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
count1 = KeyboardButton("1")
count2 = KeyboardButton("2")
count3 = KeyboardButton("3")
count_keyboard.add(count1, count2, count3)


cc_inline = InlineKeyboardMarkup(row_width=3)
cc = CallbackData("count", "cc")

cc_inline.add(
    InlineKeyboardButton(f"1", callback_data=cc.new(
        cc = "1"
    )),
    InlineKeyboardButton(f"2", callback_data=cc.new(
        cc = "2"
    )),
    InlineKeyboardButton(f"3", callback_data=cc.new(
        cc = "3"
    ))
)


group = CallbackData("set", "subject", "action")


async def get_all_cities():
    async with aiohttp.ClientSession() as ses:
        # –ø–æ–ª—É—á–∞–µ–º html —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–∞–π—Ç–∞
        response = await ses.get(url="https://vuzoteka.ru/%D0%B2%D1%83%D0%B7%D1%8B/%D0%B3%D0%BE%D1%80%D0%BE%D0%B4%D0%B0")
        # –ø–æ–¥–∫–ª—é—á–∞–µ–º bs4 –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ html'–∫–∏
        sp = BeautifulSoup(await response.text(), "lxml")

        all_cities = sp.find_all("div", class_="label-part main-top-region first")
        only_cyti = []

        for city in all_cities:
            links = city.find("a")
            s = getattr(city.find("a"), 'text', None)
            only_cyti.append(s)
        only_cyti = only_cyti[1:]
        await ses.close()
    return only_cyti


async def city_write(message: types.Message, state: FSMContext):
    get_cities_array = await asy.gather(get_all_cities())
    if message.text == "/start":
        await state.finish()
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç <a href='t.me/{message.from_user.username}'>{message.from_user.full_name}ü§ó</a>", parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
        await asy.sleep(0.5)
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?\n–û—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç")
        await state.set_state(StartState.city.state)
    elif message.text.capitalize() in get_cities_array[0]:
        await state.update_data(city=message.text.capitalize())
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±—É–¥–µ—à—å —Å–¥–∞–≤–∞—Ç—åüë®‚Äçüè´\n(–¥–æ 3-—Ö)", reply_markup=cc_inline)
    # if message.text.capitalize() not in get_cities_array[0]:
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç ü§î\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        return


# –í—ã–±–æ—Ä –∫–æ–ª–∏—á—Å—Ç–≤–∞ —Å–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async def count_chosen(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()
    msg = int(callback_data.get("cc"))

    if msg == 1 or msg == 2 or msg == 3:
        await state.update_data(count=msg)
        user_data = await state.get_data()
        if user_data['count'] == 1:
            s1_1 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="1_1"
                ))) 
            s1_1.add(*array)

            await call.message.edit_text("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Çüß±", reply_markup=s1_1)
        elif user_data['count'] == 2:
            s2_1 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_1"
                ))) 
            s2_1.add(*array)

            await call.message.edit_text("–í—ã–±–µ—Ä–∏ 1-—ã–π –ø—Ä–µ–¥–º–µ—Çüß±", reply_markup=s2_1)
        elif user_data['count'] == 3:
            s3_1 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_1"
                ))) 
            s3_1.add(*array)

            await call.message.edit_text("–í—ã–±–µ—Ä–∏ 1-—ã–π –ø—Ä–µ–¥–º–µ—Çüß±", reply_markup=s3_1)


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def group_callback(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()

    # –§–∏–∑–∏–∫–∞
    if callback_data.get('subject') == 'phys':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–§–∏–∑–∏–∫–∞")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–§–∏–∑–∏–∫–∞")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç!", reply_markup=s2_2)
        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–§–∏–∑–∏–∫–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–§–∏–∑–∏–∫–∞")
                await asy.gather(send_data_second(message=call.message, state=state))
        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–§–∏–∑–∏–∫–∞")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç!", reply_markup=s3_2)
        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–§–∏–∑–∏–∫–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–§–∏–∑–∏–∫–∞")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)
        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–§–∏–∑–∏–∫–∞" or ssr["s2"] == "–§–∏–∑–∏–∫–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–§–∏–∑–∏–∫–∞")
                await asy.gather(send_data_third(message=call.message, state=state))


    # –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ
    elif callback_data.get('subject') == 'social':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ" or ssr["s2"] == "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ")
                await asy.gather(send_data_third(message=call.message, state=state))
    

    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
    elif callback_data.get('subject') == 'eng':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" or ssr["s2"] == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
                await asy.gather(send_data_third(message=call.message, state=state))
        

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞
    elif callback_data.get('subject') == 'inf':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" or ssr["s2"] == "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")
                await asy.gather(send_data_third(message=call.message, state=state))


    # –ë–∏–æ–ª–æ–≥–∏—è
    elif callback_data.get('subject') == 'bio':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–ë–∏–æ–ª–æ–≥–∏—è")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–ë–∏–æ–ª–æ–≥–∏—è")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–ë–∏–æ–ª–æ–≥–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ë–∏–æ–ª–æ–≥–∏—è")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–ë–∏–æ–ª–æ–≥–∏—è")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–ë–∏–æ–ª–æ–≥–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ë–∏–æ–ª–æ–≥–∏—è")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–ë–∏–æ–ª–æ–≥–∏—è" or ssr["s2"] == "–ë–∏–æ–ª–æ–≥–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–ë–∏–æ–ª–æ–≥–∏—è")
                await asy.gather(send_data_third(message=call.message, state=state))


    # –ò—Å—Ç–æ—Ä–∏—è
    elif callback_data.get('subject') == 'history':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–ò—Å—Ç–æ—Ä–∏—è")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–ò—Å—Ç–æ—Ä–∏—è")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–ò—Å—Ç–æ—Ä–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ò—Å—Ç–æ—Ä–∏—è")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–ò—Å—Ç–æ—Ä–∏—è")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–ò—Å—Ç–æ—Ä–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ò—Å—Ç–æ—Ä–∏—è")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–ò—Å—Ç–æ—Ä–∏—è" or ssr["s2"] == "–ò—Å—Ç–æ—Ä–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–ò—Å—Ç–æ—Ä–∏—è")
                await asy.gather(send_data_third(message=call.message, state=state))

    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞
    elif callback_data.get('subject') == 'ximi':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–•–∏–º–∏—è")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–•–∏–º–∏—è")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–•–∏–º–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–•–∏–º–∏—è")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–•–∏–º–∏—è")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–•–∏–º–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–•–∏–º–∏—è")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–•–∏–º–∏—è" or ssr["s2"] == "–•–∏–º–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–•–∏–º–∏—è")
                await asy.gather(send_data_third(message=call.message, state=state))
    

    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
    elif callback_data.get('subject') == 'geo':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è" or ssr["s2"] == "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
                await asy.gather(send_data_third(message=call.message, state=state))

    
    # –ù–µ–º–µ—Ü–∫–∏–π
    elif callback_data.get('subject') == 'nec':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–ù–µ–º–µ—Ü–∫–∏–π")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–ù–µ–º–µ—Ü–∫–∏–π")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–ù–µ–º–µ—Ü–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ù–µ–º–µ—Ü–∫–∏–π")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–ù–µ–º–µ—Ü–∫–∏–π")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–ù–µ–º–µ—Ü–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ù–µ–º–µ—Ü–∫–∏–π")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–ù–µ–º–µ—Ü–∫–∏–π" or ssr["s2"] == "–ù–µ–º–µ—Ü–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–ù–µ–º–µ—Ü–∫–∏–π")
                await asy.gather(send_data_third(message=call.message, state=state))
    

    # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
    elif callback_data.get('subject') == 'franch':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π" or ssr["s2"] == "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π")
                await asy.gather(send_data_third(message=call.message, state=state))

    
    # –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
    elif callback_data.get('subject') == 'litr':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞" or ssr["s2"] == "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞")
                await asy.gather(send_data_third(message=call.message, state=state))

    
    # –ò—Å–ø–∞–Ω—Å–∫–∏–π
    elif callback_data.get('subject') == 'spain':
        if callback_data.get('action') == '1_1':
            await state.update_data(s1="–ò—Å–ø–∞–Ω—Å–∫–∏–π")
            await asy.gather(send_data_first(message=call.message, state=state))
        elif callback_data.get('action') == '2_1':
            await state.update_data(s1="–ò—Å–ø–∞–Ω—Å–∫–∏–π")
            s2_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="2_2"
                ))) 
            s2_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s2_2)

        elif callback_data.get('action') == '2_2':
            ssr = await state.get_data()
            if ssr['s1'] == "–ò—Å–ø–∞–Ω—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ò—Å–ø–∞–Ω—Å–∫–∏–π")
                await asy.gather(send_data_second(message=call.message, state=state))

        elif callback_data.get('action') == '3_1':
            await state.update_data(s1="–ò—Å–ø–∞–Ω—Å–∫–∏–π")
            s3_2 = InlineKeyboardMarkup(row_width=3)
            array = []
            for sus in subsidii:
                array.append(
                    InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                    subject = f"{sus['strc']}",
                    action="3_2"
                ))) 
            s3_2.add(*array)
            await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 2-–æ–π –ø—Ä–µ–¥–º–µ—Ç 2Ô∏è‚É£", reply_markup=s3_2)

        elif callback_data.get('action') == '3_2':
            ssr = await state.get_data()
            if ssr["s1"] == "–ò—Å–ø–∞–Ω—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s2="–ò—Å–ø–∞–Ω—Å–∫–∏–π")
                s3_3 = InlineKeyboardMarkup(row_width=3)
                array = []
                for sus in subsidii:
                    array.append(
                        InlineKeyboardButton(f"{sus['subject']}", callback_data=group.new(
                        subject = f"{sus['strc']}",
                        action="3_3"
                    ))) 
                s3_3.add(*array)
                await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ 3-–∏–π –ø—Ä–µ–¥–º–µ—Ç 3Ô∏è‚É£ü§ç", reply_markup=s3_3)

        elif callback_data.get('action') == '3_3':
            ssr = await state.get_data()
            if ssr["s1"] == "–ò—Å–ø–∞–Ω—Å–∫–∏–π" or ssr["s2"] == "–ò—Å–ø–∞–Ω—Å–∫–∏–π":
                await call.message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")
            else:
                await state.update_data(s3="–ò—Å–ø–∞–Ω—Å–∫–∏–π")
                await asy.gather(send_data_third(message=call.message, state=state))

# Send first handler data
async def send_data_first(message: types.Message, state: FSMContext):
    dt = await state.get_data()
    mrk = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(f"–î–∞", callback_data=sub_one.new(
            action='1'
        )),
        InlineKeyboardButton(f'–ù–µ—Ç', callback_data=sub_one.new(
            action='2'
        )))
    await message.edit_text(f"–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?\n–ì–æ—Ä–æ–¥: {dt['city']}\n–ü—Ä–µ–¥–º–µ—Ç: {dt['s1']}", reply_markup=mrk)


# Send second handler data
async def send_data_second(message: types.Message, state: FSMContext):
    dt = await state.get_data()
    mrk = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(f"–î–∞", callback_data=sub_one.new(
            action='1'
        )),
        InlineKeyboardButton(f'–ù–µ—Ç', callback_data=sub_one.new(
            action='2'
        )))
    await message.edit_text(f"–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?\n–ì–æ—Ä–æ–¥: {dt['city']}\n–ü—Ä–µ–¥–º–µ—Ç: {dt['s1']}, {dt['s2']}", reply_markup=mrk)


# Send third handler data
async def send_data_third(message: types.Message, state: FSMContext):
    dt = await state.get_data()
    mrk = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton(f"–î–∞", callback_data=sub_one.new(
            action='1'
        )),
        InlineKeyboardButton(f'–ù–µ—Ç', callback_data=sub_one.new(
            action='2'
        )))
    await message.edit_text(f"–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?\n–ì–æ—Ä–æ–¥: {dt['city']}\n–ü—Ä–µ–¥–º–µ—Ç—ã: {dt['s1']}, {dt['s2']}, {dt['s3']}", reply_markup=mrk)


# –í–≤–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
sub_one = CallbackData("one_sub", "action")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤—ã—Ö –∫–æ–ª–±–µ–∫–æ–≤
async def callback_checker(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()
    if callback_data.get('action') == '1':
        data = await state.get_data()
        await state.finish()

        if data['count'] == 1:
            dt = f"{data['s1']} "
            result_inserting = await asy.gather(insert_data(call.from_user.id, data['city'], dt))
            await call.message.edit_text(f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!!\n–ì–æ—Ä–æ–¥: {data['city']} –ü—Ä–µ–¥–º–µ—Ç: {data['s1']}", reply_markup=ok_mrk)

        elif data['count'] == 2:
            dt = f"{data['s1']} {data['s2']}"
            result_inserting = await asy.gather(insert_data(call.from_user.id, data['city'], dt))
            await call.message.edit_text(f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!!\n–ì–æ—Ä–æ–¥: {data['city']}\n–ü—Ä–µ–¥–º–µ—Ç—ã: {data['s1']}, {data['s2']}", reply_markup=ok_mrk)

        elif data['count'] == 3:
            dt = f"{data['s1']} {data['s2']} {data['s3']}"
            result_inserting = await asy.gather(insert_data(call.from_user.id, data['city'], dt))
            await call.message.edit_text(f"–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!!\n–ì–æ—Ä–æ–¥: {data['city']}\n–ü—Ä–µ–¥–º–µ—Ç—ã: {data['s1']}, {data['s2']}, {data['s3']}", reply_markup=ok_mrk)

    elif callback_data.get('action') == '2':
        await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥")
        await state.set_state(StartState.city.state)
    

def reg_handlers_start(dp: Dispatcher):
    dp.register_message_handler(city_write, state=StartState.city)
    dp.register_callback_query_handler(count_chosen, cc.filter(), state="*")
    dp.register_callback_query_handler(callback_checker, sub_one.filter(), state=StartState.city.state)
    dp.register_callback_query_handler(group_callback, group.filter(), state="*")